@page "/HallOfFameBattingPredictions"
@inject IJSRuntime JSRuntime
@inject LuceneIndexService luceneIndexService;

<link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />
<div class="wrapper">
    <header class="header">
        Local prediction inference in Blazor and ML.NET
    </header>
    <article class="main">
        <p class="params">Select algorithm for ML.NET prediction model:
            <select id="algorithmName" @onchange="OnSelectedAlgorithm" class="dropDown">
                <option value="AveragedPerceptron">AveragedPerceptron</option>
                <option value="FastForest">FastForest</option>
                <option value="FastTree">FastTree</option>
                <option value="GeneralizedAdditiveModels">GeneralizedAdditiveModels</option>
                <option selected value="LightGbm">LightGbm</option>
                <option value="LogisticRegression">LogisticRegression</option>
                <option value="StackedEnsemble">Stacked Ensemble</option>
                <option value="StochasticGradientDescentCalibrated">StochasticGradientDescentCalibrated</option>
                <option value="StochasticGradientDescentNonCalibrated">StochasticGradientDescentNonCalibrated</option>
            </select>
        </p>
        <p class="params">Select any MLB Batter to perform prediction:</p>
        <div style="background-color:white;border-style: solid;border-width:thin; border-color: #FF6A4C;border-radius:5px;">
            <BlazoredTypeahead SearchMethod="@SearchBaseballPlayersInLuceneAsync"
                               @bind-Value="@SelectedBatter"
                               Debounce="150" MaximumSuggestions="10"
                           EnableDropDown="true" ShowDropDownOnFocus="true">
                               
                <SelectedTemplate Context="item">
                    <b>@item.FullPlayerName</b>
                </SelectedTemplate>
                <ResultTemplate Context="item">
                    <b>@item.FullPlayerName</b>
                </ResultTemplate>
                <NotFoundTemplate>
                    Sorry, there weren't any baseball players found.
                </NotFoundTemplate>
                
            </BlazoredTypeahead>
        </div>
       
    </article>
    <article class="main">
        <div class="g-predictionTable">
            <h5>Hall of Fame - On Ballot</h5>
            <table>
                <thead>
                    <tr>
                        <th>Year Played</th>
                        <th>Probability</th>
                        <th>Class Label</th>
                    </tr>
                </thead>
                @foreach (var pred in this.predictionData.MLBBaseballBatterSeasonPredictions)
                {
                    <tr class=@(pred.OnHallOfFameBallotPrediction ? "g-prediction-row" : string.Empty)>
                        <td class="g-seasonNumber">@pred.SeasonNumber</td>
                        <td>@pred.OnHallOfFameBallotProbabilityLabel</td>
                        <td class="g-prediction"><div class=@(pred.OnHallOfFameBallotPrediction ? "g-prediction-true" : string.Empty)>@pred.OnHallOfFameBallotPrediction</div></td>
                    </tr>
                }
            </table>
        </div>
    </article>
    <article class="main">
        <div class="g-predictionTable">
            <h5>Hall of Fame - Induction</h5>
            <table>
                <thead>
                    <tr>
                        <th>Year Played</th>
                        <th>Probability</th>
                        <th>Class Label</th>
                    </tr>
                </thead>
                @foreach (var pred in this.predictionData.MLBBaseballBatterSeasonPredictions)
                {
                    <tr class=@(pred.InductedToHallOfFamePrediction ? "g-prediction-row" : string.Empty)>
                        <td class="g-seasonNumber">@pred.SeasonNumber</td>
                        <td>@pred.InductedToHallOfFameProbabilityLabel</td>
                        <td class="g-prediction"><div class=@(pred.InductedToHallOfFamePrediction ? "g-prediction-true" : string.Empty)>@pred.InductedToHallOfFamePrediction</div></td>
                    </tr>
                }
            </table>
        </div>
    </article>
    <article class="main">
        <div class="@cardDetailsChartStyle">
            <div class="g-predictionChart">
                <h5>Predictions - Historical Seasons</h5>
                <!-- Create a div where the graph will take place -->
                <div id="my_dataviz" style="clear: both;">
                </div>
            </div>
        </div>
    </article>

    
   
   
</div>

@code {

    // Variables
    private string cardDetailsStyle = "card-details-visible";
    private string cardDetailsChartStyle = "card-details-visible";
    private string button = "[ - ]";
    private string buttonChart = "[ - ]";

    public List<MLBBaseballBatter> batters = new List<MLBBaseballBatter>(27000);
    public List<MLBBaseballBatter> battersLastYear;
    public PredictionData predictionData;
    private MLBBaseballBatter _selectedBatter;
    private string selectedAlgorithm = "LightGbm"; //default
    private string[] predictionTypes = { "InductedToHallOfFame", "OnHallOfFameBallot" };

    // Lucene
    private DirectoryReader indexReader;
    private IndexSearcher searcher;

    StandardAnalyzer analyzer = new StandardAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48);

    NumericRangeQuery<int> queryRangedMaxRecords = NumericRangeQuery.NewInt32Range("IsBatterMaxYearsRecord", 1, 1, true, true);
    NumericRangeQuery<float> queryRangedLongerYearsRecords = NumericRangeQuery.NewSingleRange("YearsPlayed", 21f, 30f, true, true);


    public MLBBaseballBatter SelectedBatter
    {
        get { return _selectedBatter; }
        set
        {
            if (value != null)
            {
                _selectedBatter = value;
                Console.WriteLine("SelectedBatter - " + _selectedBatter.FullPlayerName);
                this.PerformPrediction();
            }
        }
    }

    protected override void OnInitialized()
    {
        this.indexReader = luceneIndexService.IndexReader;
        this.searcher = new IndexSearcher(indexReader);

        Console.WriteLine("OnInitialized - Current Count of Index Docs: " + indexReader.NumDocs);

        // Build baseball batters list

        //batters = BaseballDataSampleService.Instance.SampleBaseBallData;

        //this.battersLastYear = batters
        //  .OrderByDescending(a => a.YearsPlayed)
        //  .GroupBy(a => a.ID)
        //  .Select(g => g.First()).ToList();

        // Mike Trout (default)
        this.SelectedBatter = new MLBBaseballBatter
            {
                ID = "troutmi01",
                FullPlayerName = "Mike Trout",
                YearsPlayed = 11,
                LastYearPlayed = 2021
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderChart();
    }

    void OnSelectedAlgorithm(ChangeEventArgs e)
    {
        this.selectedAlgorithm = e.Value.ToString();
        Console.WriteLine("OnAfterRenderAsync - Selected Algorithm: " + selectedAlgorithm);

        this.PerformPrediction();
    }

    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayersInLuceneAsync(string searchText)
    {
        var baseBallPlayers = new List<MLBBaseballBatter>(50);

        BooleanQuery andQuery = new BooleanQuery();

        if (String.IsNullOrEmpty(searchText))
        {
            andQuery.Add(queryRangedMaxRecords, Occur.MUST);
            andQuery.Add(queryRangedLongerYearsRecords, Occur.MUST);
        }
        else
        {
            QueryParser fullPlayerNameParser = new QueryParser(Lucene.Net.Util.LuceneVersion.LUCENE_48, "FullPlayerName", analyzer);
            var query = fullPlayerNameParser.Parse(searchText.Trim() + "*");

            andQuery.Add(queryRangedMaxRecords, Occur.MUST);
            andQuery.Add(query, Occur.MUST);
        }

        var searchResults = searcher.Search(andQuery, 50);
        var hits = searchResults.ScoreDocs;

        foreach (var hit in hits)
        {
            var foundDoc = searcher.Doc(hit.Doc);
            var player = Util.GetBaseballBatterFromLuceneDocument(foundDoc);

            baseBallPlayers.Add(player);
        }

        // Order by years played if search term is less than 5 characters
        // This way players with common names and higher years played show up on top of search results
        if (searchText.Length < 5)
        {
            baseBallPlayers = baseBallPlayers.OrderByDescending(a => a.YearsPlayed).Select(a => a).ToList();
        }

        return await Task.FromResult(baseBallPlayers);
    }

    private List<MLBBaseballBatter> GetBaseballPlayerById(string id)
    {
        var baseBallPlayers = new List<MLBBaseballBatter>();

        var termBaseBallPlayer = new Term("Id", id);
        var termQuery = new TermQuery(termBaseBallPlayer);

        // No player has more than 25 years played
        var searchResultsTermQuery = searcher.Search(termQuery, 30); /* top 30 */;
        var hitsTermQuery = searchResultsTermQuery.ScoreDocs;

        foreach (var hit in hitsTermQuery)
        {
            var foundDoc = searcher.Doc(hit.Doc);

            var player = Util.GetBaseballBatterFromLuceneDocument(foundDoc);

            baseBallPlayers.Add(player);
        }

        return baseBallPlayers;
    }

    private void ChangeButtonAppearance(MouseEventArgs e)
    {
        var eventArgs = e;

        cardDetailsStyle = (cardDetailsStyle == "card-details-hidden") ? ("card-details-visible") : ("card-details-hidden");
        button = (button == "[ - ]") ? ("[ + ]") : ("[ - ]");
    }

    private void ChangeChartButtonAppearance(MouseEventArgs e)
    {
        var eventArgs = e;

        cardDetailsChartStyle = (cardDetailsChartStyle == "card-details-hidden") ? ("card-details-visible") : ("card-details-hidden");
        buttonChart = (buttonChart == "[ - ]") ? ("[ + ]") : ("[ - ]");
    }

    private void PerformPrediction()
    {
        // Old method
        // var selectedBatterSeasons = batters.Where(b => b.ID == this.SelectedBatter.ID).ToList();

        var selectedBatterSeasons = this.GetBaseballPlayerById(this.SelectedBatter.ID);

        this.predictionData = Util.GetMLBBaseballBatterSeasonPredictions(selectedAlgorithm, SelectedBatter, selectedBatterSeasons);
    }

    private async Task RenderChart()
    {
        if (this.predictionData.ChartData == null)
        {
            this.PerformPrediction();
        }

        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.predictionData.ChartData, this.predictionData.ChartDataMinMax, selectedAlgorithm);
    }

    /// <summary>
    ///  Depracated in favor of much faster Lucene Index Search
    /// </summary>
    /// <param name="searchText"></param>
    /// <returns></returns>
    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayers(string searchText)
    {
        return await Task.FromResult(battersLastYear.Where(x => x.FullPlayerName.ToLower().Contains(searchText.ToLower())).ToList());
    }
}